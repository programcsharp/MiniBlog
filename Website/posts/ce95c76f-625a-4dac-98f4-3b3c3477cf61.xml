<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Dynamic Linq Aggregate function</title>
  <slug>dynamic-linq-aggregate-function</slug>
  <author></author>
  <pubDate>2014-12-03 15:26:59</pubDate>
  <lastModified>2014-12-03 15:26:59</lastModified>
  <excerpt></excerpt>
  <content>&lt;p&gt;Microsoft’s Dynamic Linq library has been floating around the internet in one form or another for years. Its been distributed as a raw .cs file, not a NuGet or any sort of supported package. The most central location I’ve found for this is King Wilder’s System.Dynamic.Linq &lt;a href="https://github.com/kahanu/System.Linq.Dynamic"&gt;GitHub repo&lt;/a&gt; and &lt;a href="https://www.nuget.org/packages/System.Linq.Dynamic/"&gt;NuGet package&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I needed support for a couple of things that weren’t included in the original version, namely Sum/Average/Min/Max functions, and that in a dynamically callable way. So I built that, cribbing off of a &lt;a href="http://stackoverflow.com/questions/17490080/how-to-do-a-sum-using-dynamic-linq"&gt;Sum function found on StackOverflow&lt;/a&gt;. The code takes the name of the function you want to call and the name of the property you want to aggregate. It then uses reflection to grab the extension method of the correct type based on the property type you specify and executes it against the IQueryable, returning the result.&lt;/p&gt; &lt;p&gt;After a bit of jiggering, I realized that Sum and Average have totally different signatures than Min/Max for some reason. Adding in separate branches to the code did the trick and I came up with:&lt;/p&gt; &lt;pre class="brush: csharp"&gt;
/// &amp;lt;summary&amp;gt;
/// Dynamically runs an aggregate function on the IQueryable.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;The IQueryable data source.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;function&amp;quot;&amp;gt;The name of the function to run. Can be Sum, Average, Min, Max.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;member&amp;quot;&amp;gt;The name of the property to aggregate over.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;The value of the aggregate function run over the specified property.&amp;lt;/returns&amp;gt;
public static object Aggregate(this IQueryable source, string function, string member)
{
    if (source == null) throw new ArgumentNullException(&amp;quot;source&amp;quot;);
    if (member == null) throw new ArgumentNullException(&amp;quot;member&amp;quot;);

    // Properties
    PropertyInfo property = source.ElementType.GetProperty(member);
    ParameterExpression parameter = Expression.Parameter(source.ElementType, &amp;quot;s&amp;quot;);
    Expression selector = Expression.Lambda(Expression.MakeMemberAccess(parameter, property), parameter);
    // We've tried to find an expression of the type Expression&amp;lt;Func&amp;lt;TSource, TAcc&amp;gt;&amp;gt;,
    // which is expressed as ( (TSource s) =&amp;gt; s.Price );

    var methods = typeof(Queryable).GetMethods().Where(x =&amp;gt; x.Name == function);

    // Method
    MethodInfo aggregateMethod = typeof(Queryable).GetMethods().SingleOrDefault(
        m =&amp;gt; m.Name == function
            &amp;amp;&amp;amp; m.ReturnType == property.PropertyType // should match the type of the property
            &amp;amp;&amp;amp; m.IsGenericMethod);

    // Sum, Average
    if (aggregateMethod != null)
    {
        return source.Provider.Execute(
            Expression.Call(
                null,
                aggregateMethod.MakeGenericMethod(new[] { source.ElementType }),
                new[] { source.Expression, Expression.Quote(selector) }));
    }
    // Min, Max
    else
    {
        aggregateMethod = typeof(Queryable).GetMethods().SingleOrDefault(
            m =&amp;gt; m.Name == function
                &amp;amp;&amp;amp; m.GetGenericArguments().Length == 2
                &amp;amp;&amp;amp; m.IsGenericMethod);

        return source.Provider.Execute(
            Expression.Call(
                null,
                aggregateMethod.MakeGenericMethod(new[] { source.ElementType, property.PropertyType }),
                new[] { source.Expression, Expression.Quote(selector) }));
    }
}
&lt;/pre&gt;
&lt;p&gt;I've submitted a &lt;a href="https://github.com/kahanu/System.Linq.Dynamic/pull/12"&gt;pull request with this function&lt;/a&gt; to kahnau's repo, and he seems pretty responsive about accepting pull requests, so this will likely be in that NuGet soon.&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>Code</category>
  </categories>
  <comments></comments>
</post>